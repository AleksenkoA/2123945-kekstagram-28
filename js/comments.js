// ВОПРОСЫ ПО ДЗ 11.14 ("Надо подкачаться"):

// ЗАДАЧА 4.1. Загрузка изображений от других пользователей производится сразу после открытия страницы с удалённого сервера:
// https://28.javascript.pages.academy/kekstagram/data.

// МОЙ КОММЕНТАРИЙ:
// шаг 1. Закомментировала в main.js функции по созданию моков и вызов функции renderGallery(getPictures());:
// import { getPictures } from './data.js';
// import { renderGallery } from './gallery.js';
// В итоге на данный момент из работающих функций на сайте - только загрузка изображения (и то, без просмотра)

// шаг 2. Добавила модуль api.js, в котором создала функции getData, sendData. Экспортировала и импортировала их в main.js
// В результате - на сайте пропали фото, в консоли в браузере нет ошибок, вкладка Fetch/XHR пустая.
// во вкладке Network вижу файл api.js, там ответ - Status Code: 200 OK. Это значит, что запрос с сервера выполнен? а где полученные объекты (фото)?

// ЗАДАЧА 4.2. Если при загрузке данных с сервера произошла ошибка запроса, нужно показать соответствующее сообщение.
// МОЙ КОММЕНТАРИЙ - сделала, в модуле util.js функция showAlert, экспортировала и импортировала в main.js. Но сообщение не вижу, где оно должно появляться?

// ЗАДАЧА:
// Сейчас наша форма работает просто: при нажатии на кнопку «Опубликовать» происходит перенаправление на адрес, указанный в атрибуте action. Это не совсем удобно, и если оставить всё как есть, пользователю придётся самостоятельно возвращаться назад.
// На время выполнения запроса к серверу кнопка «Отправить» блокируется.

// МОЙ КОММЕНТАРИЙ:
// Кнопки «Отправить» в разметке и JS нет вообще. Нужна она по ТЗ? Как она называется - «Опубликовать» или «Отправить»? Нашла только эту:
// <button type="submit" class="img-upload__submit" id="upload-submit">Опубликовать</button>
//
// ЗАДАЧА:
// Добавьте обработчик отправки формы, который бы отменял действие формы по умолчанию и отправлял данные формы посредством fetch на сервер.
//
// в setupForm в form.js есть:
// 1. form.addEventListener('submit', onFormSubmit);

// 2. const onFormSubmit = (evt) => {
//  evt.preventDefault(); - отменяет действие формы по умолчанию?
//  pristine.validate();
//};

// 3. в api.js sendData отправляет данные формы посредством fetch на сервер - он и нужен? как его подключить?

// ЗАДАЧА 3.3. При успешной отправке формы форма редактирования изображения закрывается, все данные, введённые в форму, и контрол фильтра приходят в исходное состояние:
//масштаб возвращается к 100%;
//эффект сбрасывается на «Оригинал»;
//поля для ввода хэш-тегов и комментария очищаются;
//поле загрузки фотографии, стилизованное под букву «О» в логотипе, очищается.

// МОЙ КОММЕНТАРИЙ: добавить в setupForm?

// ЗАДАЧА 3.4. Если отправка данных прошла успешно, показывается соответствующее сообщение.
// Разметку сообщения, которая находится в блоке #success внутри шаблона template, нужно разместить перед закрывающим тегом </body> - В РАЗМЕТКЕ УЖЕ ЕСТЬ.
// Сообщение должно исчезать после нажатия на кнопку .success__button, по нажатию на клавишу Esc и по клику на произвольную область экрана за пределами блока с сообщением.

// ЗАДАЧА 3.5. Если при отправке данных произошла ошибка запроса, нужно показать соответствующее сообщение.
// Разметку сообщения, которая находится в блоке #error внутри шаблона template, нужно разместить перед закрывающим тегом </body>. - В РАЗМЕТКЕ УЖЕ ЕСТЬ.
// Сообщение должно исчезать после нажатия на кнопку .error__button, по нажатию на клавишу Esc и по клику на произвольную область экрана за пределами блока с сообщением. В таком случае вся введённая пользователем информация сохраняется, чтобы у него была возможность отправить форму повторно.

// МОЙ КОММЕНТАРИЙ:
// добавить #success и #error - как делала с темплейтом #picture?

// ЗАДАЧА 3.6. Нажатие на кнопку #upload-cancel приводит к закрытию формы и возвращению всех данных и контрола фильтра к исходному состоянию (описано в пункте 3.3).
// Поле загрузки фотографии, стилизованное под букву «О» в логотипе, очищается.
// Не понимаю, как сделать.
